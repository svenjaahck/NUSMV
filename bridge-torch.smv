MODULE main
VAR
  location : array 0..3 of boolean;
  traveling: array 0..3 of boolean;
  torch: boolean;
  time: 0..100;

ASSIGN
  init (location[0]) := FALSE;
  init (location[1]) := FALSE;
  init (location[2]) := FALSE;
  init (location[3]) := FALSE;
  init (torch) := FALSE;
  init (time) := 0;

  next (torch) := case
    traveling[0] | traveling[1] | traveling[2] | traveling[3] : !torch;
    TRUE: torch;
    -- rule: torch can only move if carried
  esac;

  next (location[0]) := case
    traveling[0] & torch = location[0]: !location[0];
    TRUE: location[0];
    -- rule: location changes if "0" is traveling
  esac;

  next (location[1]) := case
   traveling[1] & torch = location[1]: !location[1];
    TRUE: location[1];
  esac;

  next (location[2]) := case
    traveling[2] & torch = location[2]: !location[2];
    TRUE: location[2];
  esac;

  next (location[3]) := case
    traveling[3] & torch = location[3]: !location[3];
    TRUE: location[3];
  esac;



 
  next(time) := case
  time > 90: 90;
  traveling[0]: time + 10;
  traveling[1]: time + 5;
  traveling[2]: time + 2;
  traveling[3]: time + 1;
  TRUE: time;  
  esac;


  next(traveling[0]) := case 
    location[0] = torch: {TRUE,FALSE}; 
    traveling[0] = TRUE: FALSE;
    TRUE: traveling[0];
  esac;

  next(traveling[1]) := case 
    location[1] = torch: {TRUE,FALSE}; 
    traveling[1] = TRUE: FALSE;
    TRUE: traveling[1];
  esac;

  next(traveling[2]) := case 
    location[2] = torch: {TRUE,FALSE}; 
    traveling[2] = TRUE: FALSE;
    TRUE: traveling[2];
  esac;

  next(traveling[3]) := case 
    location[3] = torch: {TRUE,FALSE}; 
    traveling[3] = TRUE: FALSE;
    TRUE: traveling[3];
  esac;

LTLSPEC
  !(((count(traveling[0],traveling[1],traveling[2],traveling[3]) <=2))
     U (location[0] & location[1] & location[2] & 
     location[3] & time <= 17));


     ---- specification !(count(traveling[0], traveling[1], traveling[2], traveling[3]) <= 2 U ((((location[0] & location[1]) & location[2]) & location[3]) & time <= 17))  is false
-- as demonstrated by the following execution sequence
-- Trace Description: LTL Counterexample
-- Trace Type: Counterexample
--   -> State: 1.1 <-
--     location[0] = FALSE
--     location[1] = FALSE
--     location[2] = FALSE
--     location[3] = FALSE
--     traveling[0] = TRUE
--     traveling[1] = TRUE
--     traveling[2] = FALSE
--     traveling[3] = FALSE
--     torch = FALSE
--     time = 0
--   -> State: 1.2 <-
--     location[0] = TRUE
--     location[1] = TRUE
--     traveling[0] = FALSE
--     traveling[1] = FALSE
--     traveling[3] = TRUE
--     torch = TRUE
--     time = 10
--   -> State: 1.3 <-
--     traveling[3] = FALSE
--     torch = FALSE
--     time = 11
--   -> State: 1.4 <-
--     traveling[2] = TRUE
--     traveling[3] = TRUE
--   -> State: 1.5 <-
--     location[2] = TRUE
--     location[3] = TRUE
--     traveling[3] = FALSE
--     torch = TRUE
--     time = 13
--   -> State: 1.6 <-
--     location[2] = FALSE
--     torch = FALSE
--     time = 15
--   -> State: 1.7 <-
--     location[2] = TRUE
--     torch = TRUE
--     time = 17
--   -- Loop starts here
--   -> State: 1.8 <-
--     location[2] = FALSE
--     traveling[2] = FALSE
--     torch = FALSE
--     time = 19
--   -> State: 1.9 <-


